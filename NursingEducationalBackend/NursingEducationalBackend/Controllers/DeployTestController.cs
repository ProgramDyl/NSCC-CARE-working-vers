// File: Controllers/DeployTestController.cs

// --- Using Statements ---
// Correct namespace for NursingDbContext, found in your NursingDbContext.cs file
using NursingEducationalBackend.Models;
// Other necessary using statements
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Threading.Tasks;

// --- Namespace Declaration ---
namespace NursingEducationalBackend.Controllers
{
    // --- Controller Definition ---
    // Controller route set to api/apiTest
    [Route("api/apiTest")]
    [ApiController]
    public class DeployTestController : ControllerBase
    {
        // --- Dependencies ---
        // Using the correct DbContext class name
        private readonly NursingDbContext _context;
        private readonly ILogger<DeployTestController> _logger; // Logger instance

        // --- Constructor for Dependency Injection ---
        // Using the correct DbContext class name
        public DeployTestController(NursingDbContext context, ILogger<DeployTestController> logger)
        {
            _context = context;
            _logger = logger;
        }

        // --- Action Method ---
        // Handles POST requests to the route: api/apiTest/Adl
        [HttpPost("Adl")]
        public async Task<IActionResult> InsertAdlTestData()
        {
            _logger.LogInformation("Processing request for POST api/apiTest/Adl.");

            try
            {
                // 1. Create hardcoded Adl data
                //    (AdlsId should be generated by the database if it's an identity column)
                var testAdl = new Adl
                {
                    BathDate = DateTime.UtcNow, // Using current UTC time
                    TubShowerOther = "Hardcoded Shower",
                    TypeOfCare = "Hardcoded Full",
                    TurningSchedule = "Hardcoded Q2H",
                    Teeth = "Hardcoded Setup",
                    FootCare = "Hardcoded Inspection",
                    HairCare = "Hardcoded Assist"
                };
                _logger.LogInformation("Created hardcoded Adl object for api/apiTest/Adl.");

                // 2. Add to DbContext using the correct DbSet name 'Adls'
                _context.Adls.Add(testAdl);
                _logger.LogInformation("Added Adl object to DbContext for api/apiTest/Adl.");

                // 3. Save changes to database
                int recordsAffected = await _context.SaveChangesAsync();
                _logger.LogInformation("SaveChangesAsync completed for api/apiTest/Adl. {Count} record(s) affected.", recordsAffected);

                // 4. Check result and return response
                if (recordsAffected > 0)
                {
                    // You could optionally return the generated ID:
                    // return Ok(new { Message = $"Hardcoded ADL data inserted successfully.", InsertedId = testAdl.AdlsId });
                    return Ok($"Hardcoded ADL data inserted successfully via api/apiTest/Adl. {recordsAffected} record(s) affected.");
                }
                else
                {
                    _logger.LogWarning("SaveChangesAsync for api/apiTest/Adl reported 0 records affected.");
                    return StatusCode(500, "Data insertion attempted via api/apiTest/Adl but 0 records were affected.");
                }
            }
            catch (Exception ex)
            {
                // Log the full exception for diagnostics
                _logger.LogError(ex, "Error inserting hardcoded ADL data via api/apiTest/Adl.");
                // Return a server error response
                return StatusCode(500, $"Internal server error processing api/apiTest/Adl: {ex.Message}");
            }
        }

        // --- Optional: Simple GET endpoint for basic testing ---
        // Handles GET requests to api/apiTest/ping
        // [HttpGet("ping")]
        // public IActionResult Ping()
        // {
        //     _logger.LogInformation("Processing request for GET api/apiTest/ping.");
        //     return Ok($"Pong! API endpoint at api/apiTest is responding. Current time: {DateTime.UtcNow}");
        // }
    }
}